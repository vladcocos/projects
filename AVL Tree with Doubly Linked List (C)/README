1. Variabile:
    Structurile de tip pixel sunt matrici ce retin 4 variabile: r, g, b (cele
	3 canale de culoare pentru pixelii propriu-zisi) si o variabila bin ce
	retine 1 sau 0 daca pixelul respectiv a fost inclus in fisierul comprimat
	sau nu (pentru rezolvarea task-ului 4).
    Structurile de tip input_data retin ca siruri de caractere toate numele
	fisierelor de input (bmp si bin) si output (black_white, f1, f2 si f3).
fileheader, infoheader = cele 2 headere extrase din bmp
    img = imaginea curenta extrasa din bmp
    bw_img = imaginea alb-negru dupa aplicarea algoritmului
    height = inaltimea imaginii
    width = latimea imaginii
    padding = padding-ul imaginii

2. Fisiere:
    input_file = fisierul ce contine inputul: imaginea bmp, threshold si
		fisierul bin
    input_bmp = fisierul ce contine bmp-ul
    input_compressed = fisierul ce contine imaginea comprimata
    output_bmp_bw = fisierul de output pentru imaginea alb-negru
    output_bmp_f1 = fisierul de output pentru filtrul 1
    output_bmp_f2 = fisierul de output pentru filtrul 2
    output_bmp_f3 = fisierul de output pentru filtrul 3
    output_decompressed = fisierul de output ce contine imaginea decomprimata
    
3. Functii:
a) create_matrix
Initializeaza o matrice pe care o aloca dinamic si o returneaza.

b) free_matrix
Elibereaza memoria alocata unei matrici.

c) copy
Initializeaza o matrice goala in care copiaza toate elementele, cele 3 valori
r, g si b, matricii transmise ca argument.

c) flip
Initializeaza o matrice goala in care copiaza toate elementele, cele 3 valori
r, g  si b, insa in sens invers pe verticala: prima linie devine ultima, a doua penultima etc..

d) output_name
Creeaza numele pentru fisierele de output: sterge extensia ".bmp" si adauga
extensia dorita: "_black_white.bmp", "_f1.bmp", "_f2.bmp", "_f3.bmp".

e) bw
Initializeaza o matrice goala, deschide fisierul de output pentru imaginea
alb-negru si pune in matricea goala pe fiecare canal de culoare media aritmetica
a celor 3 canale din fiecare pixel din imaginea originala. Dupa care, scrie in
fisierul de output cele 2 headere din bmp-ul original si matricea rezultata ce
reprezinta imaginea alb-negru. Apoi, inchide fisierul si returneaza matricea
ce va fi utilizata pentru aplicarea filtrelor.

f) apply_filter
Initializeaza o matrice goala in care pune pe fiecare pixel suma pixelului
respectiv din imaginea originala cu vecinii sai, dupa ce fiecare este inmultit
cu elementul corespunzator din matricea filtrului. De exemplu, vecinul din
stanga al unui pixel este inmultit cu elementul de pe pozitia (1, 0) si este
adunat la suma. Daca oricare din cele 3 valori r, g, b a vreunui pixel din
matricea obtinuta depaseste 255, aceasta este egalata cu 255, iar daca
scade sub 0, este egalata cu 0. Functia returneaza astfel imaginea rezultata.

g) decompress
Initializeaza o matrice goala si deschide fisierul binar ce contine mariginile
zonelor ce formeaza imaginea comprimata. Citeste de pe fiecare linie a
fisierului linia si coloana la care se afla pixelul si cele 3 valori r, g, b ale
acestuia. Odata cu citirea, se salveaza in matricea goala fiecare pixel si
se pune valoarea 1 pe variabila bin a structurii pixel pentru pixelul respectiv.
Dupa ce se citeste tot fisierul, se parcurge matricea obtinuta si pentru
fiecare valoare 0 a variabilei bin, pixelul respectiv este egalat cu pixelul
anterior. Se deschide fisierul de output "decompressed.bmp" si se scriu
cele 2 headere si imaginea decomprimata. Memoria matricii este eliberata
si se inchid cele 2 fisiere deschise.

In main este deschis fisierul input.txt din care sunt extrase datele de input.
De asemenea, se deschide fisierul bmp original din care se extrag cele 2
headere si imaginea. Se calculeaza padding-ul prin verificarea latimii imaginii. 

Se apeleaza pe rand toate functiile necesare: bw, pentru crearea imaginii
alb-negru, apply_filter cu fiecare dintre cele 3 filtre si decompress pentru
obtinerea imaginii decomprimate. 

La aplicarea fiecarui filtru, imaginea este intoarsa prin utilizarea functiei
flip,se aplica filtrul si este intoarsa iar. Acest fapt se datoreaza faptului
ca intr-un bmp, imaginea este rasturnata, iar filtrul se aplica pe o imagine
normala (nerasturnata). Este deschis fiecare fisier de output de filtru si se
scriu headerele si imaginea cu filtrul aplicat.

La final, sunt eliberate toate memoriile alocate si se inchid toate fisierele deschise.
