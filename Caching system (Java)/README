I. Organizare proiect

1. Main (fara pachet)
2. cachingSystem
	a) FileCache
	b) pachet interfaces
		- Cache
		- CacheStalePolicy
	c) pachet classes
		- FIFOCache
		- LRUCache
		- ObservableCache (clasa abstracta)
		- ObservableFIFOCache
		- TimeAwareCache
3. dataStructures
	a) pachet classes
		- DoublyLinkedList
		- ListNode
		- Pair
4. observerPattern
	a) pachet interfaces
		- CacheListener
	b) pachet classes
		- BroadcastListener
		- KeyStatsListener
		- StatsListener
		
-------------------

II. Implementare
(Mentiune: nu am descris implementarea pentru clasele si metodele deja
implementate in scheletul temei)

a) FileCache
In clasa FileCache am implementat metoda createCacheListener. Aceasta creeaza
un listener care are metodele onHit si onPut neschimbate, iar metoda onMiss
deschide fisierul cu calea data prin cheie, citeste continutul acestuia si il
pune in cache prin apelarea echivalentului onPut din cache, anume putFileContents.

b) ListNode
Clasa ListNode descrie un nod dintr-o lista dublu inlantuita cu campurile Pair,
next si previous, ultimele 2 fiind legaturile specifice catre nodurile vecine.
Contine getteri si setteri pentru campuri.

c) DoublyLinkedList
Lista dublu inlantuita cu campurile head (primul element din lista), tail
(ultimul element) si size, getteri pentru acestea si urmatoarele metode:
- insert: adauga un nod nou la sfarsitul listei realizand legaturile necesare
intre nodul nou si tail;
- delete: sterge un nod din lista; trateaza cazuri speciale precum lista goala,
un singur element, daca elementul respectiv este head sau tail;
- destroy: sterge toata lista.

d) ObservableFIFOCache
Implementarea FIFO cache care adauga Observer pattern. Contine campurile cache
de tip FIFO cache, cacheListener (listener-ul din cadrul Observer pattern) si
stalePolicy (politica de stergere a elementelor considerate "invechite").
Suprascrie metodele din FIFO cache care, cu exceptia get si put, sunt identice.

Get si put introduc cele 3 stari ale cache-ului. In metoda get, se cauta valoarea
de la cheia cautata si daca exista, se apeleaza onHit din listener; daca nu,
se apeleaza onMiss din listener. In metoda put, se adauga perechea cheie-valoare
in cache si se apeleaza onPut din listener si clearStaleEntries pentru a sterge
intrarile vechi din cache.

Metoda clearStaleEntries sterge cea mai veche intrare din cache cat timp
politica de stergere a elementelor este valida (in cazul FIFO, numarul de
intrari sa nu depaseasca capacitatea cache-ului).

e) LRUCache
Clasa implementeaza cache-ul de tip LRU. Contine campurile cacheList (lista
dublu inlantuita folosita pentru a tine intrarile din cache in ordinea accesarii
acestora), cacheMap (hash map care asigura obtinerea unui nod din lista in
O(1)), size, stalePolicy si cacheListener. Contine de asemenea getteri pentru
campuri, si setter pentru size (LRUCache este mostenit de TimeAwareCache).
CacheList si cacheMap contin in permanenta aceleasi elemente, ambele
reprezentand intrarile din cache.

Contine metodele:
- get: returneaza valoarea de la cheia cautata in cache. Daca lista este goala
sau cheia nu exista, se apeleaza onMiss din listener si se iese din functie.
Daca cache-ul contine cheia, se sterge nodul din lista care contine cheia
respectiva si se adauga la finalul acesteia (deoarece acesta devine cel mai
recent accesat element din cache) si se apeleaza onHit din listener.
- put: adauga un element nou in cache. Se creeaza un nod nou cu cheia
si valoarea data si, daca cacheMap nu contine cheia, se adauga nodul in lista
si in map si se incrementeaza size. Daca cacheMap contine cheia, se sterge
nodul respectiv din lista, i se actualizeaza valoarea in map si se adauga la
sfarsitul listei. Se apeleaza onPut din listener si clearStaleEntries.
- size: returneaza numarul de intrari in cache;
- isEmpty: returneaza true daca cache-ul e gol, fals daca nu este;
- remove: sterge o cheie din cache. Daca cacheMap nu contine cheia, se iese
din functie. Altfel, se salveaza valoarea de la cheia respectiva, se sterge
nodul din lista, obtinut din map, se sterge cheia din map si se
decrementeaza size.
- clearAll: se sterg toate intrarile din cacheList si cacheMap;
- getEldestEntry: returneaza campul Pair de la nodul head din lista, acesta
fiind cel mai vechi accesat element din cache;
- clearStaleEntries: sterge cea mai veche intrare din cache cat timp
politica de stergere a elementelor este valida (in cazul LRU, numarul de
intrari sa nu depaseasca capacitatea cache-ului).

f) TimeAwareCache
Asemanator cu LRU Cache, singura diferenta consta in crearea unui hash map
cu elementele de tip K si Pair<K, Timestamp> care salveaza pentru fiecare cheie
timestamp-ul sau.

Metoda get este identica cu cea din LRU Cache, doar ca TimeAwareCache apeleaza
clearStaleEntries la inceputul sau, pentru a elibera elementele invechite.
Metoda put este, de asemenea, identica cu cea din LRU Cache, singura diferenta
fiind adaugarea unui timestamp cu timpul curent in keyTimestamps, daca cache-ul
nu contine cheia de adaugat, sau actualizarea timestamp-ului corespunzator
cheii, altfel.

Metoda getTimestampOfKey returneaza timestamp-ul corespunzator cheii cautate.
Metoda clearStaleEntries creeaza o lista cu elemente de tip Pair<K, Timestamp>
obtinuta din valorile hash map-ului keyTimestamps, pentru a parcurge toate
elementele din map. Pentru fiecare element din lista, se verifica daca
diferenta dintre timpul curent al sistemului si timpul din timestamp-ul
elementului este mai mare sau egala cu expirePolicy. Daca da, se sterge
elementul respectiv din keyTimestamps si din cache.

g) BroadcastListener
Contine campul listenersList, o lista ce contine toti listenerii, si metodele:
- addListener: adauga un listener in listenersList;
- onHit: pentru fiecare listener din lista, apeleaza metoda sa proprie onHit;
- onMiss: pentru fiecare listener din lista, apeleaza metoda sa proprie onMiss;
- onPut: pentru fiecare listener din lista, apeleaza metoda sa proprie onPut.

h) KeyStatsListener
Contine campurile keyHits, keyMisses si keyUpdates, acestea fiind hash map-uri
cu elemente de tip K si Pair<K, Integer>, fiecare retinand, pentru fiecare
cheie, numarul de hits, misses si updates (in urma apelului metodei onPut).

Metodele getTopHitKeys, getTopMissedKeys si getTopUpdatesKeys functioneaza
in acelasi mod: o lista cu elemente de tip Pair<K, Integer> este creata din
valorile fiecarui hash map. Se sorteaza elementele acestei liste prin folosirea
metodei sort din clasa Collections, cu parametri lista respectiva si un
comparator*, creat printr-o clasa anonima. Este creata o noua lista in care se
adauga primele top (parametru) elemente din lista sortata si se returneaza
aceasta.

*: Comparatorul rescrie metoda "compare" care primeste ca parametri 2 elemente
de tip Pair<K, Integer> si le compara descrescator dupa elementul de tip
Integer (numarul de hits/misses/updates).

Metodele onHit, onMiss si onPut incrementeaza valoarea din hash map (adica
numarul de hits/misses/updates) daca hash map-ul contine cheia cautata.
Daca nu contine cheia, se adauga un nou element in hash map-ul corespunzator
cu cheia data si valoarea 1 (daca este adaugat, inseamna ca a fost produs un
hit/miss/update).

i) StatsListener
Contine campurile hits, misses si updates. Acestea contorizeaza, pentru toate
tipurile de cache, numarul de hits, misses si updates (in urma apelului metodei
onPut). Metodele onHit, onMiss si onPut incrementeaza campurile respective.

-------------------