-----------------------------------------------------------

Nume: Cocoş Vlad
Grupă: 334CC
Tema 1

-----------------------------------------------------------

I. Organizare:

Structura:
- priority_queue.h - header care contine structurile necesare cozii
implementata cu lista simplu inlantuita si antetele functiilor
- priority_queue.c - defineste functiile asociate cozii precum 
	- create_node
	- create_priority_queue
	- insert
	- top
	- pop
	- free_priority_queue
- main.c - citeste din fisier sau de la stdin comenzile si le executa asupra
cozii

Consider ca tema este utila pentru inceputul cursului de SO pentru a ne
obisnui cu mediul de dezvoltare pe Linux si Windows.

-----------------------------------------------------------

II. Implementare

Intregul enunt al temei este implementat.

Implementarea aleasa de mine, lista simplu inlantuita, este cea simpla
in comparatie cu heap binar. Evident, nu este cea mai eficienta, intrucat
insertul are O(n) worst case, insa top si pop se executa in O(1). Consider
ca nu performanta este obiectivul primei teme, acest aspect fiind
tratat mai in detaliu la urmatoarele teme.

-----------------------------------------------------------

III. Compilare si rulare

Programul se compileaza prin comanda "make". Se creeza fisiere obiect ale
codurilor sursa, iar pentru a crea executabilul se linkeaza acestea impreuna
cu biblioteca dinamica libcompare.so (Linux) sau compare.lib (Windows) care implementeaza functia de comparare.

Pentru a rula:
- ./tema1 < fisier - pentru a primi comenzi de la stdin
- ./tema1 fisier1 [fisier2..] - pentru a primi comenzi din fisiere

-----------------------------------------------------------

IV. Bibliografie

Am citit laboratorul 1 de SO pentru a intelege mai bine cum se realizeaza
linkarea unei biblioteci intr-un exebutabil, dar si pentru a aprofunda cum se
creeaza Makefile pe Windows.

-----------------------------------------------------------

V. Git

